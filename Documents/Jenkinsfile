pipeline {
    agent {
        label 'jenkins-slave'
    }
    
    tools {
        jdk 'jdk11'
        maven 'maven3'
        jfrog 'jfrog-cli'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Git_Chcekout') {
            steps {
              git branch: 'main', 
              changelog: false, 
              poll: false, 
              url: 'https://github.com/Sharadvanth/FullStack-WebApp-DevOps.git'  
            }
        }
        stage('Maven_Compile') {
            steps {
              echo "Compiling the Source Code using Maven"
              sh 'mvn clean compile'
            }
        }
        stage('Maven_Test') {
            steps {
              echo "Running the Tests using Maven"
              sh 'mvn test'
            }
        }
        stage('Sonarqube_Analysis') {
            steps {
              withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=webappBoard \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=webappBoard '''
                    }
            }
        }
        stage('Sonarqube_QualityGates') {
            steps {
              script{
                  waitForQualityGate abortPipeline: false, 
                  credentialsId: 'sonar-cred'
              }
            }
        }
        stage('Maven_Package') {
            steps {
              echo "Packaging the SourceCode using Maven"
              sh 'mvn clean install'
            }
        }
        stage('Owasp_DependencyCheck') {
            steps {
               dependencyCheck additionalArguments: ' --scan ./', odcInstallation: 'DP'
               dependencyCheckPublisher pattern:'**/dependency-check-report.xml'  
            }
        }
        stage('Jfrog_Deploy') {
            steps {
                script {
                jf '-v'
                jf 'c show'
                jf 'rt ping'
                jf 'rt u target/**.jar devsecops'
                jf 'rt bp'
                
                }
                    
            }    
        } 
	    stage('Docker_Build') {
            steps {
                script {
               // This step should not normally be used in your script. Consult the inline help for details.
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker build -t webappboard ."
                    sh "docker tag webappboard sharadvanth/webappboard:1.0.2"
                    }
                }    
            }
        }
        stage('Trivy_Image_Scan') {
            steps {
               sh "trivy image --format table -o trivy-image-report.html sharadvanth/webappboard:1.0.2"
            }
        }
        stage('Docker_Push') {
            steps {
                script {
               // This step should not normally be used in your script. Consult the inline help for details.
                withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                    sh "docker push sharadvanth/webappboard:1.0.2"
                    }
                }    
            }
        }
        stage('Kubernetes_Deploy') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'Kube-Cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.49.2:8443') {
                    sh "kubectl apply -f deployment-service.yaml"
                }
            }
        }
        stage('Check_the_Deployment') {
            steps {
               withKubeConfig(caCertificate: '', clusterName: 'minikube', contextName: '', credentialsId: 'Kube-Cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://192.168.49.2:8443') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"
                }
            }
        }
         stage('Slack_Notification') {
            steps {
               slackSend channel: '#general', 
               color: 'Green', 
               message: 'Successful Completion of ${env.JOB_NAME} with ${env.BUILD_NUMBER}', 
               teamDomain: 'devsecops-zsw7372', 
               tokenCredentialId: 'slack-cred'
            }
        }
    }
}


